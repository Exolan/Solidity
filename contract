// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.7;

contract WebShops{
    struct Worker{
        address user;
        bool status;
    }

    struct Event{
        uint type_event;    //0 - ответ на заявку, 1 - l добавление админа
        uint id_event;      //id события
    }

    struct Score{
        uint id_score;
        address user;
        bool score;
    }

    struct Comment{
        uint id_comment;
        address user;
        string comment_text;
        Score[] scores;
    }

    struct Review{
        uint id_review;
        address user;
        string review_text;
        uint rate;
        Comment[] comments;
        Score[] scores;
    }

    struct Shop{
        uint id_shop;
        address address_shop;
        bytes32 password_shop;
        string city_shop;
        Worker[] workers;
        Review[] reviews;
    }

    struct User{
        uint id_user;
        string login;
        bytes32 password_user;
        string fio_user;
        string city_user;
        uint role;
        uint active_role;
    }

    struct Request{
        uint id_request;
        address user;
        uint new_role;
        uint id_shop;
        bool admin_answer;
        bool is_end;
    }

    mapping(address => User) public users;
    Shop[] public shops;
    mapping(address => Event) public history;
    Request[] public requests;

    constructor(){
        users[0xFd8440D2109a1EEBEFB1803698692B5fe48d358a] = User(0, "dimon", keccak256(abi.encodePacked("1234")), "Dmiriev Dmitriy Dmitrievich", "Moscow", 0, 0);

        users[0xA4cE2E7C7EaE3bC2C589493F4E6c6c9c38FA7949] = User(1, "alex", keccak256(abi.encodePacked("1234")), "Alexandrova Alexandra Alexandrovna", "Kaluga", 1, 1);

        users[0x3DD95e1afaBeB2624690F624db21ddEDe96b5982] = User(2, "rus", keccak256(abi.encodePacked("1234")), "Ruslanov Ruslan Ruslanovich", "Kaluga", 2, 2);

        Shop storage newShop1 = shops.push();
        newShop1.id_shop = 1;
        newShop1.address_shop = 0x881ceB805e4D105dc5Ff1a7403b6773353974b39;
        newShop1.password_shop = keccak256(abi.encodePacked("1234"));
        newShop1.city_shop = "Snt-Petersburg";

        Shop storage newShop2 = shops.push();
        newShop2.id_shop = 2;
        newShop2.address_shop = 0x972055aFC35A0D800473a242B2E1d1D834c67593;
        newShop2.password_shop = keccak256(abi.encodePacked("1234"));
        newShop2.city_shop = "Dmitrov";

        Shop storage newShop3 = shops.push();
        newShop3.id_shop = 3;
        newShop3.address_shop = 0x3372095ad3Bad8E8c2f4090E88b7E0b2DE1BD407;
        newShop3.password_shop = keccak256(abi.encodePacked("1234"));
        newShop3.city_shop = "Moscow";
        newShop3.workers.push(Worker(0x3DD95e1afaBeB2624690F624db21ddEDe96b5982, true));

        Shop storage newShop4 = shops.push();
        newShop4.id_shop = 4;
        newShop4.address_shop = 0xa4c295C3CD021Fc5cfb3304975D8D90084e8E656;
        newShop4.password_shop = keccak256(abi.encodePacked("1234"));
        newShop4.city_shop = "Arhangelsk";

        Shop storage newShop5 = shops.push();
        newShop5.id_shop = 5;
        newShop5.address_shop = 0x368AA27512350A0cAF59BE4a41e535cdc57EA8cb;
        newShop5.password_shop = keccak256(abi.encodePacked("1234"));
        newShop5.city_shop = "Irkutsk";
    }

    //Полезные ретёрны
    function showShops() public view returns(Shop[] memory){
        return shops;
    }

    function showUser(address user) public view returns(User memory){
        return users[user];
    }

    function showRequests() public view returns(Request[] memory){
        return requests;
    }

    function showHistory(address user) public view returns(Event memory){
        return history[user];
    }

    //Функции админа
    function answerRequest(uint id_request, bool answer) public{
        require(users[msg.sender].role == 0, "You're not the admin!");
        require(id_request < requests.length, "This request is not exist!");
        require(requests[id_request].is_end != true, "This request is already finishing!");

        if(answer == true){
            if(users[requests[id_request].user].role == 1){
                for(uint i = 0; i < shops.length; i++){
                    for(uint j = 0; j < shops[i].workers.length; j++){
                        if(shops[i].workers[j].user == requests[id_request].user){
                            if(shops[i].workers[j].user == requests[id_request].user){
                                shops[i].workers[j].status = false;
                                users[requests[id_request].user].role = 2;
                                users[requests[id_request].user].active_role = 2;
                            }
                        }
                    }
                }
            }
            else{
                shops[requests[id_request].id_shop].workers.push(Worker(requests[id_request].user, true));
                users[requests[id_request].user].role = 1;
                users[requests[id_request].user].active_role = 1;
            }
        }
        requests[id_request].admin_answer = answer;
        requests[id_request].is_end = true;
        history[msg.sender] = Event(0, id_request);
    }

    function addNewAdmin(address user) public{
        require(users[msg.sender].role == 0, "You're not the admin!");
        require(keccak256(abi.encodePacked(users[msg.sender].login)) != keccak256(abi.encodePacked('')), "This user is not exist!");
        if(users[user].role == 1){
            for(uint i = 0; i < shops.length; i++){
                for(uint j = 0; j < shops[i].workers.length; j++){
                    if(shops[i].workers[j].user == user){
                        shops[i].workers[j].status = false;
                        users[user].role = 2;
                        users[user].active_role = 2;
                    }
                }
            }
        }
        users[user].role = 0;
        users[user].active_role = 0;

        //Добавление в историю
    }

    function addNewShop(address new_shop, bytes32 password_shop, string memory city_shop) public{
        require(users[msg.sender].role == 0, "You're not the admin!");
        require(keccak256(abi.encodePacked(users[msg.sender].login)) == keccak256(abi.encodePacked('')), "This address is already exist!");
        for(uint i = 0; i < shops.length; i++){
            require(shops[i].address_shop != new_shop, "This shop is already exist!");
        }
        Shop storage newShop = shops.push();
        newShop.id_shop = shops.length - 1;
        newShop.address_shop = new_shop;
        newShop.password_shop = password_shop;
        newShop.city_shop = city_shop;
        //Добавление в историю
    }

    function deleteShop(uint id_shop) public{
        require(users[msg.sender].role == 0, "You're not the admin!");
        require(id_shop < shops.length, "This shop is not exist!");
        if(shops[id_shop].workers.length != 0){
            for(uint j = 0; j < shops[id_shop].workers.length; j++){
                users[shops[id_shop].workers[j].user].role = 2;
                users[shops[id_shop].workers[j].user].active_role = 2;
                shops[id_shop].workers[j].status = false;
            }
        }
        for(uint i = id_shop; i < shops.length; i++){
            shops[i] = shops[i+1];
        }
        shops.pop();
        //Добавление в историю
    }

    //Функции покупателя
    function addReview(uint id_shop, string memory review_text, uint rate) public{
        require(users[msg.sender].role == 2, "You're not the buyer!");
        require(id_shop < shops.length, "This shop is not exist!");
        Review storage newReview = shops[id_shop].reviews.push();
        newReview.id_review = shops[id_shop].reviews.length - 1;
        newReview.user = msg.sender;
        newReview.review_text = review_text;
        newReview.rate = rate;
        //Добавить в историю
    }

    //Общие функции
    function changeRole() public{
        require(users[msg.sender].role != 2, "You dont have permission!");
        if(users[msg.sender].active_role == users[msg.sender].role){
            users[msg.sender].active_role = 2;
        }
        else{
            users[msg.sender].active_role = users[msg.sender].role;
        }
        //Добавление в историю
    }

    function addComment(uint id_shop, uint id_review, string memory comment_text) public{
        require(users[msg.sender].active_role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        require(id_review < shops[id_shop].reviews.length, "This review is not exist!");
        Comment storage newComment = shops[id_shop].reviews[id_review].comments.push();
        newComment.id_comment = shops[id_shop].reviews[id_review].comments.length - 1;
        newComment.user = msg.sender;
        newComment.comment_text = comment_text;
        //Добавление в историю
    }

    function addRequest(uint id_shop) public{
        require(users[msg.sender].role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        if(users[msg.sender].role == 1){
            requests.push(Request(requests.length, msg.sender, 2, 0, false, false));
        }
        else{
            requests.push(Request(requests.length, msg.sender, 1, id_shop, false, false));
        }
        //Добавление в историю
    }


    //Добавление оценки
    function addScoreReview(uint id_shop, uint id_review, bool score) public{
        require(users[msg.sender].active_role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        require(id_review < shops[id_shop].reviews.length, "This review is not exist!");
        for(uint i = 0; i < shops[id_shop].reviews[id_review].scores.length; i++){
            require(shops[id_shop].reviews[id_review].scores[i].user != msg.sender, "You are already scoring!");
        }
        shops[id_shop].reviews[id_review].scores.push(Score(shops[id_shop].reviews[id_review].scores.length, msg.sender, score));
        //Добавить в историю
    }

    function removeScoreReview(uint id_shop, uint id_review, uint id_score) public{
        require(users[msg.sender].active_role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        require(id_review < shops[id_shop].reviews.length, "This review is not exist!");
        require(id_score < shops[id_shop].reviews[id_review].scores.length, "This score is not exist!");
        require(shops[id_shop].reviews[id_review].scores[id_score].user == msg.sender, "This score is not your!");
        for(uint i = id_score; i < shops[id_shop].reviews[id_review].scores.length; i++){
            shops[id_shop].reviews[id_review].scores[i] = shops[id_shop].reviews[id_review].scores[i+1];
        }
        shops[id_shop].reviews[id_review].scores.pop();
        //Добавление в историю
    }

    function addScoreComment(uint id_shop, uint id_review, uint id_comment, bool score) public{
        require(users[msg.sender].active_role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        require(id_review < shops[id_shop].reviews.length, "This review is not exist!");
        require(id_comment < shops[id_shop].reviews[id_review].comments.length, "This comment is not exist!");
        for(uint i = 0; i < shops[id_shop].reviews[id_review].comments[id_comment].scores.length; i++){
            require(shops[id_shop].reviews[id_review].comments[id_comment].scores[i].user != msg.sender, "You are already scoring!");
        }
        shops[id_shop].reviews[id_review].comments[id_comment].scores.push(Score(shops[id_shop].reviews[id_review].comments[id_comment].scores.length, msg.sender, score));
        //Добавить в историю
    }

    function removeScoreComment(uint id_shop, uint id_review, uint id_comment, uint id_score) public{
        require(users[msg.sender].active_role != 0, "You dont have permission!");
        require(id_shop < shops.length, "This shop is not exist!");
        require(id_review < shops[id_shop].reviews.length, "This review is not exist!");
        require(id_comment < shops[id_shop].reviews[id_review].comments.length, "This comment is not exist!");
        require(id_score < shops[id_shop].reviews[id_review].scores.length, "This score is not exist!");
        require(shops[id_shop].reviews[id_review].comments[id_comment].scores[id_score].user == msg.sender, "This score is not your!");
        for(uint i = id_score; i < shops[id_shop].reviews[id_review].comments[id_comment].scores.length; i++){
            shops[id_shop].reviews[id_review].comments[id_comment].scores[i] = shops[id_shop].reviews[id_review].comments[id_comment].scores[i+1];
        }
        shops[id_shop].reviews[id_review].comments[id_comment].scores.pop();
        //Добавление в историю
    }
}
