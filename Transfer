pragma solidity ^0.8.7;

contract Perevod{

    uint amount_admin;      //Счетчик админов

    //Структура юзеров
    struct User{
        address login; //Адрес
        bytes32 password; //Пароль
        bool check_admin; //Проверка на админа
    }

    //Структура категорий
    struct Category{
        uint id_cat; //ID категорий
        string name_cat; //Название категории
    }

    //Структура шаблонов
    struct Sample{
        uint id_samp; //ID шаблона
        uint id_cat; //ID категории
        string name_samp; //Название шаблона
        uint sum; //Сумма шаблона
    }

    //Структура заявок на становление админом
    struct ApplicationRole{
        uint id_apl;
        address polz;
        uint confrims;  //Кол-во оставшихся подтверждений
        bool end; //Завершено или нет
    }

    //Стркутра перевода
    struct Translate{
        uint id_trans;  //ID транзакции
        uint id_cat;    //ID категории
        // uint id_samp;
        address sender; //Адрес отправителя
        address recipient;  //Адрес получателя
        uint sum;   //Сумма перевода
        string code_word;   //Кодовое слово
        string description; //Описание
        bool secure;    //Безопасный перевод
        bool admin_answer;  //Отаетил ли админ
        bool polz_confrim;  //Ответил ли пользователь
        bool end;   //Завершена ли транзакция
        uint attempts;  //Попытки ввода ключевого слова 
    }

    struct Answer{
        address admin;
        address user;
    }

    //Создание массивов
    mapping(address => User) public users; //Массив юзеров
    ApplicationRole[] public aplications; //Массив заявок на смену роли
    Category[] public categorys; //Массив категорий
    Sample[] public samples; //Массив шаблонов
    Translate[] public translates;  //Массив транзакций
    Answer[] public answers;

    //Создание стартового варианта решения
    constructor(){
        amount_admin = 2;   //По-началу админов 2
        //Адреса уже зарегестрированных пользователей
        address admin2 = 0xd089Caf61334d0E0d342F8C92d0536f28C91e934;
        address polz1 = 0xB1fA103a2fe253cC59c7617bEFDf1E0DB1767d51;
        address polz2 = 0xB094Bf863FbDf61b7a0F3BDe82a17a15ea45E310;
        address polz3 = 0x2287601054459751cdB670fb0b682e0E1c77E4f0;
        address polz4 = 0x7e3aEC3363F5E0a831B4b5ec5dA76F78Df4cE046;
        //Админы
        users[msg.sender] = User(msg.sender, keccak256(abi.encodePacked("1234")), true);
        users[admin2] = User(admin2, keccak256(abi.encodePacked("1234")), true);
        //Пользователи
        users[polz1] = User(polz1, keccak256(abi.encodePacked("1234")), false);
        users[polz2] = User(polz2, keccak256(abi.encodePacked("1234")), false);
        users[polz3] = User(polz3, keccak256(abi.encodePacked("1234")), false);
        users[polz4] = User(polz4, keccak256(abi.encodePacked("1234")), false);

        //Создание категорий
        categorys.push(Category(categorys.length, "Lichniy perevod"));
        categorys.push(Category(categorys.length, "Oplata arendi gilya"));
        categorys.push(Category(categorys.length, "Lichnie vzaimorascheti"));

        //Создание шаблонов
        //Подарок
        samples.push(Sample(samples.length, categorys[0].id_cat, "Podarock", 10));
        samples.push(Sample(samples.length, categorys[0].id_cat, "Podarock", 30));
        samples.push(Sample(samples.length, categorys[0].id_cat, "Podarock", 50));
        //Квартплата
        samples.push(Sample(samples.length, categorys[1].id_cat, "Cvartplata", 70));
        samples.push(Sample(samples.length, categorys[1].id_cat, "Cvartplata", 90));
        //Погашение задолжности
        samples.push(Sample(samples.length, categorys[2].id_cat, "Pogasheniye zadolgnosti", 90));
    }

    //Функция создания заявки на смену роли
    function apl_change_status() public{
        require (users[msg.sender].check_admin != true, "You are already the admin!");   //Проверка, админ ли вы или нет
        aplications.push(ApplicationRole(aplications.length, msg.sender, amount_admin, false));//Добавление в массив
    }

    //Ответ админа на заявку по смене роли
    function apl_admin_answer(uint id_apl, bool answer) public{
        require(users[msg.sender].check_admin == true, "You are not an admin!");    //Проверка, админ запускает или нет
        require(aplications[id_apl].end != true, "Already end!");    //Проверка статуса заявки
        require(aplications.length >= id_apl, "This aplication is not exist!");
        if(answer){
            aplications[id_apl].confrims = aplications[id_apl].confrims - 1;   //Уменьшение кол-ва оставшихся подтверждений
            answers.push(Answer(msg.sender, aplications[id_apl].polz));
            //Если отсавшиеся подтверждения равны 0
            if(aplications[id_apl].confrims < 1){
                users[aplications[id_apl].polz].check_admin = true;    //Смена роли
                amount_admin += 1;  //Увеличение кол-ва админов
        }
        }
        else{
            aplications[id_apl].end = true;  //Сразу закрытие заявки
        }
    }

    function viewAnswer() public view returns(Answer[] memory){
        return answers;
    }

    //Просмотр пользователя
    function viewUser(address _polz) public view returns(User memory){
        return users[_polz];
    }

    //Просмотр категорий
    function viewCat() public view returns(Category[] memory){
        return categorys;
    }

    function viewSamples() public view returns(Sample[] memory){
        return samples;
    }

    function viewTrans() public view returns(Translate[] memory){
        return translates;
    }

    function viewAplications() public view returns(ApplicationRole[] memory){
        return aplications;
    }

    function cancelTrans(uint _id_trans) public payable{
        require(translates[_id_trans].sender == msg.sender, "You are not the sender!");
        require(translates[_id_trans].polz_confrim == false, "Already is late!");
        translates[_id_trans].end = true;
        if (translates[_id_trans].secure == true){
            payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum - (translates[_id_trans].sum / 10));
        }
        else{
            payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum);
        }
    }

    //Регистрация
    function registration(address _login, bytes32 _password) public returns(bool){
        require(users[_login].login != _login, "This user is already exist!");  //Проверка на то, существует ли пользователь под данныи логином
        users[_login] = User(_login, _password, false); //Внесение в список юзеров
        return true;
    }
    
    //Авторизация
    function avtorization(address _login, bytes32 _password) public view returns(bool){
        require(users[_login].login == _login, "This user is not exist!");  //Првоерка, существует ли пользователь
        require(users[_login].password == _password, "Wrong password!");    //Проверка пароля
        return true;
    }

    //Создания транзакции
    function add_trans(address _recipient, uint _id_cat,  uint sum, string memory _code_word, string memory _description, bool _secure) public payable {
        require(msg.sender != _recipient, "You can not translate to yourself!");    //Проверка на то, что не переводим самому себе
        require(categorys.length > _id_cat, "This category does not exist!");   //Проверка на то, что есть такая категория
        require(msg.value >= sum, "You dont have money!");
        if (_secure == true){
            translates.push(Translate(translates.length, _id_cat, msg.sender, _recipient, sum, _code_word, _description, true, false, false, false, 3));
        }
        else{
            translates.push(Translate(translates.length, _id_cat, msg.sender, _recipient, sum, _code_word, _description, false, true, false, false, 3));
        }
    }

    //Ответ на безопасный перевод
    function secure_answer(uint _id_trans, bool answer_admin) public payable{
        require(users[msg.sender].check_admin == true, "You're not an admin!"); //Проверка на админа
        require(msg.sender != translates[_id_trans].sender, "You can not confrim translate to yourself!");  //Нельзя принять у самого себя
        require(translates[_id_trans].end != true, "Translate is over!");   //Проверка, завершена ли транзакция
        require(translates[_id_trans].admin_answer != true, "Always answer!");  //Проверка, ответил ли другой админ
        if (answer_admin == true){
            translates[_id_trans].admin_answer = true;
        }
        else{
            translates[_id_trans].admin_answer = true;
            translates[_id_trans].end = true;
        }
        payable(msg.sender).transfer(translates[_id_trans].sum / 10);   //Перевод админу 10%
    }

    //Ответ получателя
    function recipient_answer(uint _id_trans, string memory _code_word, bool answer_recipient) public payable{
        require(msg.sender == translates[_id_trans].recipient, "You're not the recepient!");    //Проверка на получателя
        require(translates[_id_trans].end != true, "Always end!");  //Проверка, завершена ли транзакция
        require(translates[_id_trans].admin_answer == true, "Admin don't answer this translate!");  //Првоерка на ответ админа
        require(translates[_id_trans].polz_confrim != true, "You always answer!");  //Проверка, ответил ли получатель
        if(answer_recipient){
            if (keccak256(abi.encodePacked((_code_word))) == keccak256(abi.encodePacked((translates[_id_trans].code_word)))){
                translates[_id_trans].polz_confrim = true;
                translates[_id_trans].end = true;
                payable(translates[_id_trans].recipient).transfer(translates[_id_trans].sum);
            }
            else{
                translates[_id_trans].attempts -= 1;
                if (translates[_id_trans].attempts == 0){
                    translates[_id_trans].polz_confrim = true;
                    translates[_id_trans].end = true;
                    if (translates[_id_trans].secure == true){
                        payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum - (translates[_id_trans].sum / 10));
                    }
                    else{
                        payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum);
                    }
                }
            }
        }
        else{
            translates[_id_trans].polz_confrim = true;
            translates[_id_trans].end = true;
            if (translates[_id_trans].secure == true){
                payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum - (translates[_id_trans].sum / 10));
            }
            else{
                payable(translates[_id_trans].sender).transfer(translates[_id_trans].sum);
            }
        }
    }
}
